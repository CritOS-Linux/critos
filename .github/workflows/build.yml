name: Build CritOS

on:
  schedule:
    - cron: "40 4 * * 1" # 4:40 UTC Monday
  push:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - ".github/workflows/build_iso*.yml"
  pull_request:
    branches:
      - testing
      - unstable
    paths-ignore:
      - "**.md"
      - "**.txt"
      - ".github/workflows/build_iso*.yml"
  merge_group:
  workflow_dispatch:
    inputs:
      handwritten:
        description: "Small changelog:"
      fresh-rechunk:
        description: "Clear rechunk history"
        type: boolean
        default: false

env:
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  push-ghcr:
    name: Make
    runs-on: ubuntu-24.04
    continue-on-error: false
    if: ${{ github.event_name == 'workflow_dispatch' || contains('testing unstable', github.ref_name) }}

    strategy:
      fail-fast: false
      matrix:
        base_image_flavor: [main]
        base_name: [critos]
        base_image_name: [kinoite]
        target_image_flavor: [main]
        target_nvidia_flavor: [nvidia]
        fedora_version: [42]
        include:
          - fedora_version: 42
            is_latest_version: true
            is_stable_version: true

    steps:
      - name: Mount btrfs for podman storage
        uses: ublue-os/container-storage-action@main
        with:
          target-dir: /var/lib/containers

      - name: Define env.CONTAINER_TARGET
        run: |
          if [[ "${{ matrix.base_name }}" == "critos-deck-nvidia" ]]; then
            echo "CONTAINER_TARGET=critos-nvidia" >> $GITHUB_ENV
          else
            echo "CONTAINER_TARGET=${{ matrix.base_name }}" >> $GITHUB_ENV
          fi

      - name: Define env.IMAGE_FLAVOR
        run: |
          if [[ "${{ matrix.base_name }}" =~ "nvidia" ]]; then
            if [[ "${{ matrix.target_image_flavor }}" == "main" ]]; then
              echo "IMAGE_FLAVOR=${{ matrix.target_nvidia_flavor }}" >> $GITHUB_ENV
            else
              echo "IMAGE_FLAVOR=${{ matrix.target_image_flavor }}-${{ matrix.target_nvidia_flavor }}" >> $GITHUB_ENV
            fi
          else
            echo "IMAGE_FLAVOR=${{ matrix.target_image_flavor }}" >> $GITHUB_ENV
          fi

      - name: Define env.IMAGE_NAME
        run: |
          DESKTOP=""
          if [[ "${{ matrix.base_image_name }}" == "silverblue" ]]; then
            DESKTOP="-gnome"
          fi

          if [[ "${{ matrix.base_name }}" == "critos-deck" ]]; then
            if [[ "${{ matrix.target_image_flavor }}" == "asus" ]]; then
              echo "IMAGE_NAME=critos-ally${DESKTOP}" >> $GITHUB_ENV
            else
              echo "IMAGE_NAME=critos-deck${DESKTOP}" >> $GITHUB_ENV
            fi
          elif [[ "${{ matrix.base_name }}" == "critos-deck-nvidia" ]]; then
            echo "IMAGE_NAME=critos-deck-nvidia${DESKTOP}" >> $GITHUB_ENV
          else
            if [[ "${{ env.IMAGE_FLAVOR }}" == "main" ]]; then
              echo "IMAGE_NAME=critos${DESKTOP}" >> $GITHUB_ENV
            else
              echo "IMAGE_NAME=critos${DESKTOP}-${{ env.IMAGE_FLAVOR }}" >> $GITHUB_ENV
            fi
          fi

      - name: Define env.NVIDIA_BASE
        run: |
          if [[ "${{ matrix.base_name }}" == "critos-deck-nvidia" ]]; then
            echo "NVIDIA_BASE=critos-deck" >> $GITHUB_ENV
          else
            echo "NVIDIA_BASE=critos" >> $GITHUB_ENV
          fi

      - name: Define env.SHA_HEAD_SHORT
        run: |
          echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get source versions
        id: labels
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            skopeo inspect docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ matrix.base_image_name }}-${{ matrix.base_image_flavor }}:${{ matrix.fedora_version }} > source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "$ver" = "null" ]; then
              echo "inspected image version must not be empty or null" >&2
              exit 1
            fi
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      - name: Generate Version
        id: generate-version
        shell: bash
        run: |
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          UPSTREAM_TAG="${UPSTREAM_TAG%\.[0-9]}"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"

          if [ -n "${{ github.event.pull_request.number }}" ]; then
            VERSION="pr-${FEDORA_VERSION}-${{ github.event.pull_request.number }}"
            PRETTY_VERSION="PR (${{ github.event.pull_request.number }}, ${UPSTREAM_TAG})"
          elif [[ ${{ github.ref_name }} == "unstable" ]]; then
            VERSION="unstable-${UPSTREAM_TAG}"
            PRETTY_VERSION="Unstable (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            VERSION="testing-${UPSTREAM_TAG}"
            PRETTY_VERSION="Testing (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          else
            VERSION="${UPSTREAM_TAG}"
            PRETTY_VERSION="Stable (F${UPSTREAM_TAG})"
          fi

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "pretty=${PRETTY_VERSION}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Prepare build args file
        run: |
          cat > build_args.txt <<EOF
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          IMAGE_FLAVOR=${{ env.IMAGE_FLAVOR }}
          NVIDIA_FLAVOR=${{ matrix.target_nvidia_flavor }}
          NVIDIA_BASE=${{ env.NVIDIA_BASE }}
          IMAGE_VENDOR=${{ github.repository_owner }}
          BASE_IMAGE_NAME=${{ matrix.base_image_name }}
          BASE_IMAGE_FLAVOR=${{ matrix.base_image_flavor }}
          FEDORA_VERSION=${{ matrix.fedora_version }}
          IMAGE_BRANCH=${{ github.ref_name }}
          SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }}
          VERSION_TAG=${{ steps.generate-version.outputs.tag }}
          VERSION_PRETTY=${{ steps.generate-version.outputs.pretty }}
          EOF

      - name: Build Image
        id: build-image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo -E buildah build \
            --target "${{ env.CONTAINER_TARGET }}" \
            --build-arg-file build_args.txt \
            --secret "id=GITHUB_TOKEN,env=GITHUB_TOKEN" \
            --tag raw-img .

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.PUSH_IMAGE_REGISTRY }}

      - name: Generate previous reference
        id: generate-prev-ref
        shell: bash
        run: |
          if [ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]; then
            IMAGEREF=""
          else
            IMAGEREF="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:stable"
          fi

          echo "ref=${IMAGEREF}" >> $GITHUB_OUTPUT
          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.3
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.2.3'
          ref: 'raw-img'
          prev-ref: '${{ steps.generate-prev-ref.outputs.ref }}'
          version: '${{ steps.generate-version.outputs.tag }}'
          labels: |
            org.opencontainers.image.created=<timestamp>
            org.opencontainers.image.description=CritOS Linux is a custom image built upon Fedora Atomic Desktops aiming to bring the best of Linux gaming to all of your devices.
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/CritOS-Linux/critos
            org.opencontainers.image.title=CritOS Linux
            org.opencontainers.image.vendor=CritOS
            org.opencontainers.image.url=https://critos.github.io/

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          VERSION_TAG="${{ steps.rechunk.outputs.version }}"
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          FEDORA_VERSION="${{ matrix.fedora_version }}"
          SHA_SHORT="${GITHUB_SHA::7}"
          BUILD_TAGS=( "${VERSION_TAG}" )

          unset LATEST
          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
            LATEST="1"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [ -n "$LATEST" ]; then
              BUILD_TAGS+=("pr-${{ github.event.pull_request.number }}")
            fi
          elif [[ ${{ github.ref_name }} == "unstable" ]]; then
            BUILD_TAGS+=("${FEDORA_VERSION}-unstable" "unstable-${FEDORA_VERSION}")
            if [ -n "$LATEST" ]; then BUILD_TAGS+=("unstable"); fi
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            BUILD_TAGS+=("${FEDORA_VERSION}-testing" "testing-${FEDORA_VERSION}")
            if [ -n "$LATEST" ]; then BUILD_TAGS+=("testing"); fi
          else
            BUILD_TAGS+=("${FEDORA_VERSION}" "stable-${VERSION_TAG}" "${FEDORA_VERSION}-stable" "stable-${FEDORA_VERSION}")
            if [ -n "$LATEST" ]; then BUILD_TAGS+=("latest" "stable"); fi
          fi

          echo "Generated the following build tags:"
          for TAG in "${BUILD_TAGS[@]}"; do
            echo "${TAG}"
          done
          echo "alias_tags=${BUILD_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Push to GHCR
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea
        id: push
        if: github.event_name != 'pull_request'
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            log_sum() { echo "$1" >> $GITHUB_STEP_SUMMARY; }
            log_sum '# Push to GHCR result'
            log_sum '```'
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
            for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
                dest_image="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}:$tag"
                sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://$dest_image &&
                    log_sum "$dest_image"
            done
            log_sum '```'
